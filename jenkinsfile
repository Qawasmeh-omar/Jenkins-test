pipeline {
    agent any
    
    stages {
        stage('Clone') {
            steps {

            checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], userRemoteConfigs: [[url: 'https://github.com/Qawasmeh-omar/Jenkins-test.git']]])

               // git branch: 'main', credentialsId: 'db602758-f911-4eaa-a9fe-680c04106e1f', url: 'https://github.com/Qawasmeh-omar/Jenkins-test.git'
            }
        }
        
    
    //stardog- maybe? - main issue, commercial tool. 
     stage('SHACL validation') {
            steps {
                script {
                    def ttlFile = readFile('ontologies/ontology.ttl')
                    def shaclShape = readFile('test-shape.ttl')
                    
                    // Validate TTL against SHACL shape
                    def validationResult = validateWithSHACL(ttlFile, shaclShape)
                    
                    print("********************************** results ********************************** ")
                    print (validationResult.passed)
                    
                    if (validationResult.passed) {
                        // Post the TTL to GraphDB
                        postToGraphDB(validationResult.data)
                    } else {
                        print ("error")
                        error("Validation failed: ${validationResult.error}")
                    }
                }
            }
        }
    }
}

def validateWithSHACL(ttlData, shaclData) {
    // Write the TTL and SHACL data to temporary files
    def ttlFile = writeTempFile(ttlData, 'ontology.ttl')
    def shaclFile = writeTempFile(shaclData, 'test-shape.ttl')
    
    // Execute SHACL validation
    def validationOutput = bat(script: "pyshacl -s test-shape.ttl -m -f human ${ttlFile}", returnStdout: true)
    
    // Process the validation output
    def validationResult = parseValidationOutput(validationOutput)
    
    return validationResult
}

def postToGraphDB(ttlData) {


       // def curlCommand = "curl -X POST -H 'Content-Type:application/x-turtle' -T '${ttlData}' http://localhost:7210/repositories/jenkins/rdf-graphs/service?graph=http://example.org/airbus"

        def url = "http://localhost:7210/repositories/jenkins/rdf-graphs/service?graph=http://example.org/airbus"
        def ttl=${ttlData}
        echo "omaar"
        echo ttl
        def curl = "curl -X POST -H 'Content-Type:application/x-turtle' -T '${ttlData}' '${url}'"
        //bat "curl -X POST -H 'Content-Type:application/x-turtle' -T '${ttlData}' '${url}'"
        echo curl

        

        //bat 'curl -X POST -H Content-Type:application/x-turtle -T ${ttlData} http://localhost:7210/repositories/jenkins/rdf-graphs/service?graph=http://example.org/airbus'
}

def writeTempFile(content, filename) {
    def tempFile = File.createTempFile(filename, '')
    tempFile.write(content)
    
    return tempFile.absolutePath
}

def parseValidationOutput(output) {
    // Your code to parse the validation output and extract relevant information goes here
    // Example:
    if (output.contains('Conforms: True')) {
        return [passed: true, data: output]
    } else {
        def error = output //output.split('conforms false')[1].trim()
        return [passed: false, error: error]
    }
    
}